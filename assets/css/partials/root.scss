@use "settings" as *;
@use "shapes";


:root {
	@each $color,
	$value in $colors {
		--#{$color}-color: #{$value};

		@each $shade,
		$weight in $shades {
			@if $shade < 400 {
				--#{$color}-color-#{$shade}: #{lighten($value, $weight)};
			}

			@else if $shade >400 {
				--#{$color}-color-#{$shade}: #{darken($value, $weight)};
			}

			@else {
				--#{$color}-color-#{$shade}: #{$value};
			}
		}
	}

	@each $key,
	$margin in $margins {
		--margin-#{$key}: #{$margin};
	}

	@each $key,
	$value in $border {
		--border-#{$key}: #{$value};
	}

	--border: var(--border-color) var(--border-width) var(--border-type) var(--border-radius);

	--gutter: 1rem;
	--vertical-unit: #{$vertical-unit};

	--outer-bound: #{2 * $gutter};
	--inner-bound-width: #{$inner-bound-width};
	--outer-bound-width: #{$outer-bound-width};
	--header-height: #{shapes.slope-rem-minmax($min-header-height, $max-header-height, $min-supported-screen-width, $max-supported-screen-width)};

	@if $substract-header-height {
		--screen-height: calc(100vh - var(--header-height));
	}

	@else {
		--screen-height: 100vh;
	}
}

@if $fade-in-transition {
	.main-content>* {
		transition-duration: 750ms;
		transition-timing-function: ease-out, linear;
		transition-property: transform, opacity;
	}

	body:not(.page-has-loaded):not(.cmt-layout) {
		.main-content>* {
			transform: translateY(20vh);
			opacity: 0;
		}
	}
}

@each $key,
$margin in $margins {
	.margin--#{$key} {
		margin-bottom: var(--margin-#{$key});
	}

	.margin-bottom--#{$key} {
		margin-bottom: var(--margin-#{$key});
	}

	.margin-top--#{$key} {
		margin-top: var(--margin-#{$key});
	}

	.gap--#{$key} {
		gap: var(--margin-#{$key});
	}

	.stack--#{$key} {
		@include shapes.stack(var(--margin-#{$key}));
	}
}